{"version":3,"sources":["logo.svg","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","props","state","token","data","totalLength","currentLength","done","running","handleChange","bind","handleSubmit","makeRequest","finish","onSubmit","this","value","onChange","placeholder","className","disabled","href","target","Object","keys","length","e","setState","preventDefault","res","Objects","values","console","log","i","id","flight_number","split","departure","icao","arrival","status_code","flight","time_started","time_ended","landing_fpm","alert","error","url","axios","headers","request","fileId","Math","random","toString","substr","element","document","createElement","file","Blob","JSON","stringify","type","URL","createObjectURL","download","body","appendChild","click","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.59bd5f98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport * as axios from 'axios';\r\n\r\nexport default class Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            token: '',\r\n            data: {},\r\n            totalLength: 0,\r\n            currentLength: 0,\r\n            done: false,\r\n            running: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.makeRequest = this.makeRequest.bind(this);\r\n        this.finish = this.finish.bind(this);\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input value={this.state.token} onChange={this.handleChange} placeholder=\"Auth Token\"></input>\r\n                    <button className=\"submit\" disabled={this.state.running}>Get Logbook</button>\r\n                    <a href=\"https://github.com/mtchdev/pf-logbook/blob/master/auth_token.md\" target=\"_BLANK\">Learn how to get your auth token</a>\r\n                </form>\r\n                <div className=\"logs\">\r\n                    <code>Finished { Object.keys(this.state.data).length } of { this.state.totalLength } flights</code>\r\n                    {\r\n                        this.done ? <code>Finished! Your download will start shortly.</code> : ''\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            token: e.target.value\r\n        });\r\n    }\r\n\r\n    async handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (this.state.running) return;\r\n        \r\n        try {\r\n            let res = await this.makeRequest('https://api.projectfly.co.uk/api/v3/bookings/logbook?page=0&filter=');\r\n            if (res.data) {\r\n                this.setState({\r\n                    ...this.state,\r\n                    running: true\r\n                });\r\n                try {\r\n                    let Objects = Object.values(res.data.data);\r\n                    this.setState({\r\n                        ...this.state,\r\n                        totalLength: res.data.data.length\r\n                    });\r\n\r\n                    console.log('Working...');\r\n                    for (let i = 0; i < Objects.length; i++) {\r\n                        let data = Objects[i];\r\n                        try {\r\n                            let res = await this.makeRequest(`https://api.projectfly.co.uk/api/v3/bookings/${data.id}/details`);\r\n                            let log = res.data.data;\r\n                            let flight_number = log.flight_number.split('\\/');\r\n                            let aircraft = 0;\r\n                            this.state.data[data.id] = {\r\n                                \"Booking\": {\r\n                                    \"Departure_Icao\": log.departure.icao,\r\n                                    \"Arrival_Icao\":  log.arrival.icao,\r\n                                    \"Status\": log.status_code,\r\n                                    \"Callsign\": flight_number[0], \r\n                                    \"Flight_Number\": flight_number[1],\r\n                                    \"User_Aircraft\": aircraft\r\n                                },\r\n                                \"Flight\": {\r\n                                    \"Time_Started\": log.flight.time_started, \r\n                                    \"Time_Ended\": log.flight.time_ended,\r\n                                    \"Landing_Fpm\": log.flight.landing_fpm, \r\n                                    \"Status\": 2\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            alert('Something wen\\'t wrong (likely auth token refresh). We\\'ve made the file for you anyway.');\r\n                            this.finish();\r\n                            return;\r\n                        }\r\n\r\n                        console.log(`Finished ${i + 1} of ${Objects.length}`);\r\n\r\n                        if (i === Objects.length - 1) {\r\n                            this.finish();\r\n                        }\r\n\r\n                        this.setState({\r\n                            ...this.state,\r\n                            currentLength: this.state.currentLength + 1\r\n                        });\r\n                    };\r\n                } catch (e) {\r\n                    alert('No data found.');\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            alert('Request Failed: Check console for more information. (Check the auth token?)');\r\n        }\r\n    }\r\n    \r\n    async makeRequest(url) {\r\n        let request = await axios.get(url, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + this.state.token\r\n            }\r\n        });\r\n    \r\n        return request\r\n    }\r\n\r\n    async finish() {\r\n        this.setState({\r\n            ...this.state,\r\n            running: false,\r\n            done: true\r\n        });\r\n        let fileId = Math.random().toString(36).substr(2, 5);\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([JSON.stringify(this.state.data)], {type: 'text/plain'});\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = `Bookings_${fileId}.json`;\r\n        document.body.appendChild(element); // Required for this to work in FireFox\r\n        element.click();\r\n    }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport * as axios from 'axios';\r\nimport Main from './components/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h3>projectFLY Logbook Exporter (<strong>STKP</strong>)</h3>\r\n        <span className=\"description\">This web app allows you to export your projectFLY data into the SimToolKitPro format.</span>\r\n        <Main />\r\n\r\n        <div className=\"disclaimer\">\r\n          <span>This website is not affiliated with projectFLY.</span>\r\n          <span>Source Code: <a href=\"https://github.com/mtchdev/pf-logbook\" target=\"_BLANK\">GitHub</a></span>\r\n          <span>No form data is ever sent to a server or database, all processing is done locally.</span>\r\n          <span className=\"danger\"><strong>Never share your auth token with anyone.</strong></span>\r\n        </div>\r\n\r\n        <div className=\"thanks\">\r\n          Special thanks to mtchdev & AndrewTech & webdes03\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}